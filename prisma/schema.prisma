// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum TypeSeat {
  ECONOMY
  BUSINESS
  FIRST
}

enum StatusTicket {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  password String
  passport String?
  role     UserRole
  ticket   Ticket[]
  session  Session[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AirPlane {
  id     String   @id @default(cuid())
  name   String
  image  String
  code   String   @default("ABC_123")
  flight Flight[]
}

model Flight {
  id                    String       @id @default(cuid())
  departure_date        DateTime
  departure_city        String
  departure_city_code   String
  arrival_data          DateTime
  destination_city      String
  destination_city_code String
  price                 Int
  airPlaneId            String
  airPlane              AirPlane     @relation(fields: [airPlaneId], references: [id])
  flightSeat            FlightSeat[]
  ticket                Ticket[]
}

model FlightSeat {
  id          String   @id @default(cuid())
  flightId    String
  flight      Flight   @relation(fields: [flightId], references: [id])
  seat_number String
  is_booked   String
  type        TypeSeat
  ticket      Ticket?
}

model Ticket {
  id             String       @id @default(cuid())
  code           String       @unique
  price          Int
  booking_date   DateTime
  token_midtrans String?
  status         StatusTicket
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  flightId       String
  flight         Flight       @relation(fields: [flightId], references: [id])
  flightSeatId   String       @unique
  flightSeat     FlightSeat   @relation(fields: [flightSeatId], references: [id])
}
